/**
 * This file is generated by jsonrpcstub, DO NOT CHANGE IT MANUALLY!
 */

#ifndef JSONRPC_CPP_STUB_MINIGFS_CLIENT_H_
#define JSONRPC_CPP_STUB_MINIGFS_CLIENT_H_

#include <jsonrpccpp/client.h>

class minigfs_Client : public jsonrpc::Client
{
    public:
        minigfs_Client(jsonrpc::IClientConnector &conn, jsonrpc::clientVersion_t type = jsonrpc::JSONRPC_CLIENT_V2) : jsonrpc::Client(conn, type) {}

        Json::Value ObtainChunkURL(const std::string& action, const std::string& arguments, const std::string& chunkindex, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["chunkindex"] = chunkindex;
            p["class_id"] = class_id;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("ObtainChunkURL",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value PushChunk2Replica(const std::string& action, const std::string& arguments, const std::string& chunk, const std::string& chunkindex, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["chunk"] = chunk;
            p["chunkindex"] = chunkindex;
            p["class_id"] = class_id;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("PushChunk2Replica",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value CommitAbort(const std::string& action, const std::string& arguments, const std::string& chunkindex, const std::string& class_id, const std::string& commitorabort, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["chunkindex"] = chunkindex;
            p["class_id"] = class_id;
            p["commitorabort"] = commitorabort;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("CommitAbort",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value LookUp(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["class_id"] = class_id;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("LookUp",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value Create(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& created_class_id, const std::string& fhandle, const std::string& filename, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID, const std::string& sattr) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["class_id"] = class_id;
            p["created_class_id"] = created_class_id;
            p["fhandle"] = fhandle;
            p["filename"] = filename;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            p["sattr"] = sattr;
            Json::Value result = this->CallMethod("Create",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
        Json::Value dumpJ(const std::string& action, const std::string& arguments, const std::string& class_id, const std::string& host_url, const std::string& object_id, const std::string& owner_vsID) throw (jsonrpc::JsonRpcException)
        {
            Json::Value p;
            p["action"] = action;
            p["arguments"] = arguments;
            p["class_id"] = class_id;
            p["host_url"] = host_url;
            p["object_id"] = object_id;
            p["owner_vsID"] = owner_vsID;
            Json::Value result = this->CallMethod("dumpJ",p);
            if (result.isObject())
                return result;
            else
                throw jsonrpc::JsonRpcException(jsonrpc::Errors::ERROR_CLIENT_INVALID_RESPONSE, result.toStyledString());
        }
};

#endif //JSONRPC_CPP_STUB_MINIGFS_CLIENT_H_
